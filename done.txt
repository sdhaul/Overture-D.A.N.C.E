Here is the readme file of the project along with the ENTIRE front end that I have done so far.
Let me know what's next I can do

## üìú **Overview**

Overture-D.A.N.C.E.R. is an AI-driven web application that classifies dance styles (e.g., Hip Hop, Bharatanatyam, Michael Jackson) from video inputs using advanced computer vision and machine learning. It provides biomechanical analysis and cultural context for predictions, combining techniques from motion analysis research, temporal deep learning, and explainable AI.

## üéØ **Key Features**

1. **Multi-Style Dance Classification**
    - Detects **8+ dance styles** using hybrid Temporal CNN-Transformer models.
    - Supported styles: Hip Hop, Ballet, Michael Jackson (signature moves), Bharatanatyam, Flamenco, Tap, Pop, and Spanish.
1. **Biomechanical Motion Analysis**
    - Quantifies **sharpness, fluidity, footwork complexity, and rhythmic accuracy** via joint kinematics.
    - Implements dance pedagogy metrics (e.g., Laban Effort Analysis, *anga suddham* for classical forms).
1. **Cultural Context Visualization**
    - Interactive radar charts and 2D/3D style embeddings using D3.js and Three.js.
    - Temporal motion trails comparing user movements to reference dancers.
1. **Explainable AI Feedback**
    - Highlights style-defining features (e.g., "92% match in MJ's heel-leading footwork").
    - Cross-references movement patterns with cultural dance anthropology.

## üõ†Ô∏è **Tech Stack**

| **Component**    | **Tools**                                                               |
| ---------------- | ----------------------------------------------------------------------- |
| **Frontend**     | Vue, D3.js, Three.js, MediaPipe BlazePose (TF.js)                       |
| **Backend**      | FastAPI, ONNX Runtime,  **Google Cloud Spanner** (distributed newSQL database) |
| **AI/ML Models** | PyTorch (TCN + Transformer), HuggingFace Transformers, RAFT-Stereo Flow |
| **Datasets**     | Let's Dance Dataset, Kaggle Indian Classical Dance, Synthetic MJ Moves  |

## üìö **Research Implementation**

1. **Temporal Convolutional Networks (TCNs)**
    - Adapted from [noa-codes.github.io/dance.pdf](https://noa-codes.github.io/dance.pdf) for modeling pose sequences.
    - Enhanced with attention gates for style-specific feature weighting.
1. **Contrastive Dance Embeddings**
    - Implemented supervised contrastive loss (from [Georgia Tech Paper](https://sites.cc.gatech.edu/cpl/projects/dance/paper.pdf)) to separate dance styles in latent space.
1. **Cultural Motion Metrics**
    - Custom joint alignment scoring for Indian classical dance (*anga suddham*).
    - Flamenco footwork rhythm analysis via audio-visual correlation.
1. **Modern Upgrades**
    - Replaced Farneback optical flow with **RAFT-Stereo (2023)** for robust motion context.
    - Integrated **Transformer encoders** for long-range temporal dependencies.

Let me know if you need adjustments to align with your hackathon scope!


I will also show the vue code

styles.css
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background: linear-gradient(-45deg, #262626, #242424, #333333, #000000);
  background-size: 400% 400%;
  animation: gradientMove 10s ease infinite;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@keyframes gradientMove {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}
.acronymContainer {
  /* Your styles here */
  font-size: 1.5em;
  font-family: 'Courier New', Courier, monospace;
}

body {
  margin: 0;
  font-size:1.2em;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.15s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

.card {
  padding: 2em;
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}


App.vue
<template>
  <div class="bg-[linear-gradient(to_bottom,#000000,#333333)] min-h-screen relative">
    <!-- Hero Section -->
    <HeroSection />

    <!-- Scroll Down Prompt -->
    <ScrollDown />

    <!-- Add spacing between ScrollDown and VideoPrompt -->
    <div class="spacer"></div>

    <!-- Video Prompt Section -->
    <VideoPrompt />

    <!-- Example target element for scrolling -->
    <div id="video-prompt" class="py-20 text-white text-center fade-in-text">
        <h2 class="text-3xl font-bold">Video Upload Section</h2>
        <p class="mt-4">This is where users can upload their dance video.</p>
    </div>
  </div>
</template>

<script>
import HeroSection from './components/HeroSection.vue';
import VideoPrompt from './components/VideoPrompt.vue';
import ScrollDown from './components/ScrollDown.vue';
import { gsap } from 'gsap';

export default {
  components: {
    HeroSection,
    ScrollDown,
    VideoPrompt,
  },
  mounted() {
    // Fade-in animation for the text after scrolling
    gsap.from(".fade-in-text", {
      scrollTrigger: {
        trigger: ".fade-in-text",
        start: "top bottom", // Starts when the text enters the viewport
      },
      duration: 1,
      opacity: 0, // Start with opacity at zero
      y: -20, // Move slightly upward
      ease: "power2.out",
    });
  },
};
</script>

<style>
/* Add spacing between components */
.spacer {
  height: 20vh; /* Adjust this value to increase or decrease the gap */
}

/* Global styles if needed */
.fade-in-text {
  opacity: 0; /* Ensure it starts invisible */
  transition: opacity ease-in-out, transform ease-in-out;
}
</style>


ScrollDown.vue
<template>
  <div class="scroll-down-container">
    <div class="arrows-container">
      <div class="arrow glow-orbit-cyan"></div>
      <div class="arrow glow-orbit-cyan"></div>
    </div>
  </div>
</template>

<script>
import { gsap } from "gsap";

export default {
  mounted() {
    gsap.from(".scroll-down-container", {
      delay: 4,
      duration: 1,
      opacity: 0,
      y: 20,
      ease: "power2.out",
    });

    gsap.to(".arrow", {
      y: -8,
      repeat: -1,
      yoyo: true,
      duration: 0.8,
      ease: "power1.inOut",
      stagger: 0.15,
    });
  },
};
</script>

<style scoped>
.scroll-down-container {
  position: absolute;
  bottom: 5vh;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  flex-direction: column;
  align-items: center;
}

.arrows-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: -2px; /* Tighter grouping for a double-arrow look */
}

.arrow {
  width: 12px; /* Narrower arrow */
  height: 12px;
  border: solid #22D3EE;
  border-width: 0 2px 2px 0;
  transform: rotate(45deg);
  border-radius: 2px; /* Slightly rounded for a smooth look */
}

.glow-orbit-cyan {
  box-shadow: 0px 0px 10px rgba(34, 211, 238, 0.75);
}
</style>


HeroSection.vue
<template>
  <div class="relative text-[#E0E7FF] h-[110vh] flex flex-col items-center justify-center overflow-hidden px-12">
    <!-- Glowing Orbiting Particle -->
    <div class="absolute w-4 h-4 bg-cyan-400 rounded-full glow-orbit" ref="particle"></div>

    <!-- OVERTURE Text with Tooltip -->
    <div class="tooltip-container">
      <h1 class="text-6xl font-bold mb-6 opacity-0 glow-text-cyan cursor-help" ref="overtureText">
        OVERTURE
      </h1>
      <div class="tooltip">
        Beginning of a performance. For this project, the AI-powered prelude to understanding and analyzing dance styles.
      </div>
    </div>

    <!-- Logo Container with MJ Silhouette -->
    <div class="relative w-16 h-16 mb-8" ref="logoContainer">
      <img src="./images/mj.png" alt="D.A.N.C.E.R. Logo" class="absolute inset-0 w-full h-full object-contain opacity-0 glow-image" ref="logo" />
    </div>

    <!-- Glowing D.A.N.C.E.R. Letters -->
    <div class="acronymContainer flex justify-center space-x-4 relative w-full mb-12" ref="acronymContainer">
      <span v-for="(letter, index) in letters" :key="index" class="text-6xl font-bold opacity-0 glow-text-magenta">
        {{ letter }}{{ index < letters.length - 1 ? '.' : '' }}
      </span>
    </div>

    <!-- Spaced Full Form with Glow -->
    <div class="full-form-container flex justify-center space-x-6 mt-12 text-xl opacity-0 w-full" ref="fullFormContainer">
      <span v-for="(word, index) in words" :key="index" class="opacity-0 glow-text-cyan px-2">
        {{ word }}
      </span>
    </div>

    <!-- Floating Neon Shape -->
    <div class="absolute right-10 top-1/3 w-20 h-20 border-2 border-magenta-400 rounded-[20%] rotate-45 glow-shape" ref="shape"></div>
  </div>
</template>

<script>
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

gsap.registerPlugin(ScrollTrigger);

export default {
  data() {
    return {
      letters: ['D', 'A', 'N', 'C', 'E', 'R'],
      words: [
        'DANCE ', 'ANALYSIS ', 'NETWORK ', 'FOR ', 'CLASSIFICATION ', 'AND ', 'EXPLAINABLE ', 'RECOGNITION'
      ]
    };
  },
  mounted() {
    this.animateCosmicSequence();
  },
  methods: {
    animateCosmicSequence() {
    const tl = gsap.timeline();
    
    tl.to(this.$refs.particle, {
        duration: 8,
        x: 300,
        y: -200,
        repeat: -1,
        yoyo: true,
        ease: 'sine.inOut'
    }, 0);

    tl.from(this.$refs.overtureText, {
        duration: 0.8,
        opacity: 0,
        y: 30,
        ease: 'power4.out'
    }, 0.5);

    tl.to(this.$refs.logo, {
        duration: 1,
        opacity: 1,
        ease: 'power2.inOut'
    }, '-=0.5');

    tl.from(this.$refs.acronymContainer.children, {
        duration: 0.8,
        opacity: 0,
        y: 20,
        stagger: 0.15,
        ease: 'back.out(1.7)'
    }, '-=0.3');

    tl.from(this.$refs.fullFormContainer.children, {
        duration: 1.2,
        opacity: 0,
        x: -30,
        stagger: 0.15,
        ease: 'power3.out'
    }, '-=0.4');

    tl.to(this.$refs.shape, {
        duration: 4,
        y: -100,
        rotate: 90,
        repeat: -1,
        yoyo: true,
        ease: 'power1.inOut'
    }, 0);
    }

  }
};
</script>

<style scoped>
.glow-text-cyan {
  text-shadow: 0 0 10px rgba(34, 211, 238, 0.8), 0 0 20px rgba(34, 211, 238, 0.5);
}

.glow-text-magenta {
  text-shadow: 0 0 10px rgba(192, 38, 211, 0.8), 0 0 20px rgba(192, 38, 211, 0.5);
}

.glow-shape {
  box-shadow: 0 0 15px rgba(192, 38, 211, 0.7);
}

.glow-orbit {
  box-shadow: 0 0 12px rgba(34, 211, 238, 0.9);
}

.glow-image {
  filter: drop-shadow(0 0 8px rgba(34, 211, 238, 0.8));
}

/* Tooltip styles */
.tooltip-container {
  position: relative;
  display: inline-block;
}

.tooltip {
  visibility: hidden;
  position: absolute;
  top: 50%;
  left: 140%;
  transform: translateY(-50%);
  max-width: 300px;
  margin-top: 150px;
  background-color: rgba(42, 41, 41, 0.9);
  color: #E0E7FF;
  text-align: left;
  padding: 10px 15px;
  border-radius: 6px;
  font-size: 14px;
  line-height: 1.4;
  z-index: 100;
  opacity: 0;
  transition: opacity 0.3s, visibility 0.3s;
  box-shadow: 0 0 15px rgba(34, 211, 238, 0.7);
  border: 1px solid rgba(34, 211, 238, 0.5);
  backdrop-filter: blur(5px);
}

.tooltip-container:hover .tooltip {
  visibility: visible;
  opacity: 0.8;
}

.tooltip::after {
  content: "";
  position: absolute;
  top: 50%;
  right: 100%;
  margin-top: -8px;
  border-width: 8px;
  border-style: solid;
  border-color: transparent rgba(42, 41, 41, 0.9) transparent transparent;
}
</style>

<template>
  <div class="text-white py-12 flex flex-col items-center" ref="videoPromptContainer">
    <h2 class="text-4xl font-bold mb-6">Ready to Analyze Your Dance?</h2>
    <p class="text-lg mb-8 text-gray-400">
      Upload your dance video below to get started with AI-powered analysis.
    </p>
    <button @click="$scrollTo('#video-prompt')" class="border border-white text-white px-6 py-3 rounded-full hover:bg-white hover:text-black">
      Upload Video
    </button>
  </div>
</template>

<script>
import { gsap } from 'gsap';

export default {
  name: 'VideoPrompt',
  mounted() {
    this.animateVideoPrompt();
  },
  methods: {
    animateVideoPrompt() {
      // Apply a 6-second ease-in animation to the container
      gsap.to(this.$refs.videoPromptContainer, {
        duration: 6, // Duration of the animation
        opacity: 1, // Target opacity
        y: 0, // Move to its original position
        ease: 'power2.in', // Ease-in effect
        startAt: { opacity: 0, y: 50 } // Starting values
      });
    }
  }
};
</script>

<style scoped>
/* Add additional styling if needed */
</style>
